#ifndef _ADMM_H_
#define _ADMM_H_

// Library for fixed point number representation
#include <ap_fixed.h>

// Fixed point data representation for the circuit input
typedef ap_ufixed<12, 12, AP_RND_CONV, AP_SAT> fxd_in;

// Fixed point data representation for the circuit output
typedef ap_ufixed<12, 12, AP_RND_CONV, AP_SAT> fxd_out;

// Fixed point data representation for the data to convert input
// from ADC range to actual (model range) and from actual range
// to DAC range
typedef ap_fixed<32, 14, AP_RND_CONV, AP_SAT> fxd_conv;

// Fixed point data representation for every signal inside the algorithm
typedef ap_fixed<18, 6> fxd;

typedef ap_fixed<21, 3> fxd_m;

typedef ap_fixed<67, 37> fxd_tmp_m;

// Number of system states (x_k)
#define nX 2

// Number of system inputs (u_k)
#define nU 1

// Number of system parameters (p_k)
#define nP 0

// Number of system unmeasurable inputs (d_k)
#define nD 0

// Prediction horizon
#define N 5

// Control horizon
#define Nu 3

// Number of reference inputs
#define nRef 1

// Number of controller inputs [x_k; u_(k-1)]
#define nX_CTRL 3

// Number of optimization variables
#define nDim_CTRL 21

// Number of constraints
#define nCon 10

// Regularization parameter
#define reg_par 32

// Maximum number of iterations
#define max_iter 30

// Index of the input to be tracked
static const fxd ref_idx[nRef] = {0};

// Precomputed matrix for ADMM initialization
static const fxd G[nX_CTRL] = {0.000000, 0.000000, 0.000000};

// Precomputed matrix for ADMM (it depends on A and B system matrices)
static const fxd_m M1[nDim_CTRL][nDim_CTRL] = {
{-0.022978, 0.003033, 0.000641, 0.000169, 0.002904, 0.016889, 0.000209, -0.000462, -0.004194, -0.000224, -0.000433, -0.000760, -0.000567, -0.000376, 0.000032, -0.000813, -0.000281, 0.000063, -0.001000, -0.000218, 0.000063},
{0.003033, -0.030760, 0.006401, -0.000477, -0.000525, 0.001896, 0.000955, 0.004386, 0.016954, -0.000101, -0.002127, -0.009806, -0.002676, -0.003749, -0.001817, -0.006246, -0.004868, -0.001468, -0.011151, -0.006336, -0.001468},
{0.000641, 0.006401, -0.035771, 0.000113, -0.001456, 0.000401, -0.000701, -0.001990, 0.005042, 0.001704, 0.005224, 0.020337, 0.001399, -0.006181, -0.011665, -0.008339, -0.016091, -0.010788, -0.028070, -0.026879, -0.010788},
{0.000169, -0.000477, 0.000113, -0.020074, 0.005916, 0.000106, -0.004099, 0.002185, -0.000023, -0.000696, 0.000582, -0.000430, -0.000241, 0.000294, -0.000290, -0.000076, 0.000015, -0.000284, -0.000191, -0.000269, -0.000284},
{0.002904, -0.000525, -0.001456, 0.005916, -0.016527, 0.001815, -0.001966, -0.003370, 0.004391, -0.001174, -0.000038, 0.002956, -0.000652, 0.001044, 0.001104, 0.000712, 0.001961, 0.001010, 0.002991, 0.002971, 0.001010},
{0.016889, 0.001896, 0.000401, 0.000106, 0.001815, -0.020695, 0.000130, -0.000289, -0.002621, -0.000140, -0.000270, -0.000475, -0.000354, -0.000235, 0.000020, -0.000508, -0.000176, 0.000039, -0.000625, -0.000136, 0.000039},
{0.000209, 0.000955, -0.000701, -0.004099, -0.001966, 0.000130, -0.010251, 0.000761, 0.000936, -0.002791, 0.000810, 0.001452, -0.001610, 0.001344, 0.000531, -0.000105, 0.001764, 0.000475, 0.001784, 0.002239, 0.000475},
{-0.000462, 0.004386, -0.001990, 0.002185, -0.003370, -0.000289, 0.000761, -0.009813, 0.001991, -0.001971, -0.001397, 0.005134, -0.001970, 0.001165, 0.002568, 0.000183, 0.003448, 0.002425, 0.004559, 0.005874, 0.002425},
{-0.004194, 0.016954, 0.005042, -0.000023, 0.004391, -0.002621, 0.000936, 0.001991, -0.027469, -0.000426, -0.002033, -0.007364, -0.002594, -0.002953, -0.001084, -0.005225, -0.003500, -0.000815, -0.008595, -0.004315, -0.000815},
{-0.000224, -0.000101, 0.001704, -0.000696, -0.001174, -0.000140, -0.002791, -0.001971, -0.000426, -0.011523, -0.000377, 0.000538, -0.009792, 0.002244, 0.002435, -0.005955, 0.004682, 0.002436, -0.000052, 0.007118, 0.002436},
{-0.000433, -0.002127, 0.005224, 0.000582, -0.000038, -0.000270, 0.000810, -0.001397, -0.002033, -0.000377, -0.011296, -0.000895, -0.007998, -0.005559, 0.005430, -0.009830, 0.000268, 0.005628, -0.006351, 0.005896, 0.005628},
{-0.000760, -0.009806, 0.020337, -0.000430, 0.002956, -0.000475, 0.001452, 0.005134, -0.007364, 0.000538, -0.000895, -0.035710, -0.004396, -0.010565, -0.010191, -0.016682, -0.018425, -0.009026, -0.037289, -0.027451, -0.009026},
{-0.000567, -0.002676, 0.001399, -0.000241, -0.000652, -0.000354, -0.001610, -0.001970, -0.002594, -0.009792, -0.007998, -0.004396, -0.043059, -0.003976, 0.002745, -0.040876, 0.001001, 0.003861, -0.035712, 0.004862, 0.003861},
{-0.000376, -0.003749, -0.006181, 0.000294, 0.001044, -0.000235, 0.001344, 0.001165, -0.002953, 0.002244, -0.005559, -0.010565, -0.003976, -0.041156, -0.005612, -0.040474, -0.041834, -0.003145, -0.078946, -0.044979, -0.003145},
{0.000032, -0.001817, -0.011665, -0.000290, 0.001104, 0.000020, 0.000531, 0.002568, -0.001084, 0.002435, 0.005430, -0.010191, 0.002745, -0.005612, -0.042864, -0.018320, -0.043642, -0.040447, -0.077352, -0.084089, -0.040447},
{-0.000813, -0.006246, -0.008339, -0.000076, 0.000712, -0.000508, -0.000105, 0.000183, -0.005225, -0.005955, -0.009830, -0.016682, -0.040876, -0.040474, -0.018320, -0.105645, -0.049282, -0.013564, -0.152196, -0.062846, -0.013564},
{-0.000281, -0.004868, -0.016091, 0.000015, 0.001961, -0.000176, 0.001764, 0.003448, -0.003500, 0.004682, 0.000268, -0.018425, 0.001001, -0.041834, -0.043642, -0.049282, -0.106434, -0.038496, -0.164672, -0.144930, -0.038496},
{0.000063, -0.001468, -0.010788, -0.000284, 0.001010, 0.000039, 0.000475, 0.002425, -0.000815, 0.002436, 0.005628, -0.009026, 0.003861, -0.003145, -0.040447, -0.013564, -0.038496, -0.069149, -0.081539, -0.107645, -0.069149},
{-0.001000, -0.011151, -0.028070, -0.000191, 0.002991, -0.000625, 0.001784, 0.004559, -0.008595, -0.000052, -0.006351, -0.037289, -0.035712, -0.078946, -0.077352, -0.152196, -0.164672, -0.081539, -0.366012, -0.246211, -0.081539},
{-0.000218, -0.006336, -0.026879, -0.000269, 0.002971, -0.000136, 0.002239, 0.005874, -0.004315, 0.007118, 0.005896, -0.027451, 0.004862, -0.044979, -0.084089, -0.062846, -0.144930, -0.107645, -0.246211, -0.283826, -0.107645},
{0.000063, -0.001468, -0.010788, -0.000284, 0.001010, 0.000039, 0.000475, 0.002425, -0.000815, 0.002436, 0.005628, -0.009026, 0.003861, -0.003145, -0.040447, -0.013564, -0.038496, -0.069149, -0.081539, -0.107645, -0.100399} };

// Precomputed matrix for ADMM
static const fxd_m M2[nDim_CTRL][nCon + (N+1)*nX_CTRL] = {
{0.194866, -0.194866, -0.006672, 0.014781, 0.006672, -0.014781, 0.007157, 0.013844, -0.007157, -0.013844, 0.005422, 0.092923, 0.540436, 0.005761, 0.087162, 0.060663, 0.019522, 0.038078, 0.012824, 0.004761, 0.005628, 0.004815, 0.003627, 0.002001, 0.001000, 0.002001, -0.000000, 0.000000},
{-0.157724, 0.157724, -0.030552, -0.140363, 0.030552, 0.140363, 0.003216, 0.068072, -0.003216, -0.068072, -0.015279, -0.016797, 0.060663, -0.016234, -0.000563, 0.384791, 0.046779, 0.233385, 0.128016, 0.040145, 0.057095, 0.050849, 0.034793, 0.022302, 0.011151, 0.022302, 0.000000, 0.000000},
{-0.033342, 0.033342, 0.022444, 0.063678, -0.022444, -0.063678, -0.054527, -0.167161, 0.054527, 0.167161, 0.003622, -0.046585, 0.012824, 0.003848, -0.050434, 0.128016, -0.042443, -0.135346, 0.284584, 0.070020, 0.128956, 0.120618, 0.072817, 0.056139, 0.028070, 0.056139, 0.000000, 0.000000},
{-0.008810, 0.008810, 0.131163, -0.069928, -0.131163, 0.069928, 0.022279, -0.018614, -0.022279, 0.018614, -0.642362, 0.189304, 0.003389, 0.317490, -0.128186, -0.009549, 0.046966, -0.035296, 0.002264, 0.001016, 0.000916, 0.000840, 0.000534, 0.000382, 0.000191, 0.000382, 0.000000, 0.000000},
{-0.150999, 0.150999, 0.062920, 0.107853, -0.062920, -0.107853, 0.037559, 0.001213, -0.037559, -0.001213, 0.189304, -0.528859, 0.058077, 0.201135, 0.270006, -0.010498, 0.071363, -0.017064, -0.029116, -0.006102, -0.013389, -0.012676, -0.007406, -0.005982, -0.002991, -0.005982, 0.000000, 0.000000},
{0.121791, -0.121791, -0.004170, 0.009238, 0.004170, -0.009238, 0.004473, 0.008653, -0.004473, -0.008653, 0.003389, 0.058077, -0.662227, 0.003600, 0.054476, 0.037914, 0.012201, 0.023799, 0.008015, 0.002976, 0.003518, 0.003009, 0.002267, 0.001251, 0.000625, 0.001251, 0.000000, 0.000000},
{-0.010843, 0.010843, 0.328023, -0.024364, -0.328023, 0.024364, 0.089323, -0.025929, -0.089323, 0.025929, -0.131163, -0.062920, 0.004170, -0.139361, 0.076441, 0.019095, 0.184092, -0.058923, -0.014028, -0.000138, -0.006927, -0.007032, -0.003358, -0.003569, -0.001784, -0.003569, 0.000000, 0.000000},
{0.024019, -0.024019, -0.024364, 0.314024, 0.024364, -0.314024, 0.063076, 0.044701, -0.063076, -0.044701, 0.069928, -0.107853, -0.009238, 0.074298, -0.182152, 0.087727, 0.124548, 0.065251, -0.039798, -0.005546, -0.018604, -0.018421, -0.009485, -0.009119, -0.004559, -0.009119, 0.000000, 0.000000},
{0.218079, -0.218079, -0.029937, -0.063708, 0.029937, 0.063708, 0.013640, 0.065042, -0.013640, -0.065042, -0.000739, 0.140501, -0.083877, -0.000785, 0.141286, -0.660929, 0.060961, 0.207742, 0.100849, 0.032827, 0.044830, 0.039605, 0.027640, 0.017190, 0.008595, 0.017190, -0.000000, 0.000000},
{0.011630, -0.011630, 0.089323, 0.063076, -0.089323, -0.063076, 0.368728, 0.012073, -0.368728, -0.012073, -0.022279, -0.037559, -0.004473, -0.023671, -0.013888, -0.002010, -0.207900, 0.067860, 0.034080, 0.031597, 0.012118, 0.006163, 0.012014, 0.000104, 0.000052, 0.000104, 0.000000, 0.000000},
{0.022497, -0.022497, -0.025929, 0.044701, 0.025929, -0.044701, 0.012073, 0.361465, -0.012073, -0.361465, 0.018614, -0.001213, -0.008653, 0.019777, -0.020991, -0.042545, 0.073257, -0.183649, 0.104476, 0.048357, 0.045064, 0.035234, 0.032362, 0.012702, 0.006351, 0.012702, -0.000000, 0.000000},
{0.039517, -0.039517, -0.046461, -0.164273, 0.046461, 0.164273, -0.017223, 0.028639, 0.017223, -0.028639, -0.013754, 0.094588, -0.015199, -0.014614, 0.109202, -0.196128, 0.081213, 0.356536, -0.593270, 0.116735, 0.182523, 0.165840, 0.107944, 0.074579, 0.037289, 0.074579, -0.000000, 0.000000},
{0.029478, -0.029478, 0.051523, 0.063026, -0.051523, -0.063026, 0.313329, 0.255920, -0.313329, -0.255920, -0.007715, -0.020872, -0.011338, -0.008197, -0.012675, -0.053520, -0.114464, -0.024263, 0.027975, -0.760705, 0.224601, 0.183725, 0.153177, 0.071425, 0.035712, 0.071425, -0.000000, 0.000000},
{0.019527, -0.019527, -0.043020, -0.037290, 0.043020, 0.037290, -0.071796, 0.177880, 0.071796, -0.177880, 0.009397, 0.033401, -0.007510, 0.009985, 0.023416, -0.074972, 0.098713, -0.000716, -0.123613, 0.246791, -0.603267, 0.356259, 0.238840, 0.157893, 0.078946, 0.157893, -0.000000, -0.000000},
{-0.001649, 0.001649, -0.016985, -0.082175, 0.016985, 0.082175, -0.077913, -0.173755, 0.077913, 0.173755, -0.009292, 0.035326, 0.000634, -0.009873, 0.045199, -0.036330, 0.025158, 0.184390, -0.233300, 0.185854, 0.346047, -0.672274, 0.191344, 0.154703, 0.077352, 0.154703, 0.000000, 0.000000},
{0.042286, -0.042286, 0.003369, -0.005866, -0.003369, 0.005866, 0.190562, 0.314561, -0.190562, -0.314561, -0.002430, 0.022785, -0.016264, -0.002582, 0.025367, -0.124912, -0.009531, 0.046631, -0.166777, -0.402566, -0.179925, 0.214430, -0.484318, 0.304393, 0.152196, 0.304393, -0.000000, 0.000000},
{0.014626, -0.014626, -0.056436, -0.110346, 0.056436, 0.110346, -0.149813, -0.008577, 0.149813, 0.008577, 0.000487, 0.062745, -0.005625, 0.000517, 0.062227, -0.097364, 0.116917, 0.166003, -0.321825, 0.425906, -0.242748, -0.292030, 0.427908, -0.670656, 0.164672, 0.329344, 0.000000, -0.000000},
{-0.003275, 0.003275, -0.015201, -0.077615, 0.015201, 0.077615, -0.077965, -0.180106, 0.077965, 0.180106, -0.009101, 0.032335, 0.001260, -0.009670, 0.042005, -0.029361, 0.021681, 0.175555, -0.215756, 0.182484, 0.353283, -0.660281, 0.190206, 0.163077, -0.918461, 0.163077, 0.000000, 0.000000},
{0.052023, -0.052023, -0.057098, -0.145901, 0.057098, 0.145901, 0.001663, 0.203229, -0.001663, -0.203229, -0.006112, 0.095715, -0.020009, -0.006494, 0.102209, -0.223018, 0.111272, 0.282740, -0.561394, 0.107842, -0.231559, -0.383755, 0.036417, -0.267976, -0.133988, -0.267976, 0.000000, 0.000000},
{0.011351, -0.011351, -0.071637, -0.187961, 0.071637, 0.187961, -0.227778, -0.188683, 0.227778, 0.188683, -0.008615, 0.095080, -0.004366, -0.009153, 0.104233, -0.126725, 0.138598, 0.341558, -0.537582, 0.608390, 0.110535, -0.952311, 0.618113, -0.507579, -0.753789, 0.492421, -1.000000, -0.000000},
{-0.003275, 0.003275, -0.015201, -0.077615, 0.015201, 0.077615, -0.077965, -0.180106, 0.077965, 0.180106, -0.009101, 0.032335, 0.001260, -0.009670, 0.042005, -0.029361, 0.021681, 0.175555, -0.215756, 0.182484, 0.353283, -0.660281, 0.190206, 0.163077, -0.918461, 0.163077, 0.000000, -1.000000} };

// Precomputed matrix for ADMM
static const fxd_m M3[nCon][nDim_CTRL] = {
{1.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000},
{-0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000} };

// Precomputed matrix for ADMM
static const fxd_m M4[nCon + (N+1)*nX_CTRL][nDim_CTRL] = {
{-1.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{-0.500000, 0.000000, 0.000000, -1.000000, -1.000000, -0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{-1.000000, 0.000000, 0.000000, -0.000000, -1.000000, -1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{-1.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, -0.500000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -1.000000, -0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, -1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, -0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -1.000000, -0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, -1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -1.000000, -0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, -1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -1.000000, -0.500000, 1.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, -1.000000, 0.000000, 1.000000, 0.000000},
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000} };

// Precomputed vector for ADMM
static const fxd v3[nCon] = {0.300000, 0.300000, 8.000000, 1.000000, 8.000000, 1.000000, 8.000000, 1.000000, 8.000000, 1.000000};

// Weight matrix for the state vector in the optimization
// problem (useful when the reference value changes)
static const fxd Q[nX_CTRL][nX_CTRL] = {{1.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000} };

// Weight matrix for the state vector in the optimization
// problem (useful when the reference value changes)
static const fxd P[nX_CTRL][nX_CTRL] = {{1.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000},
{0.000000, 0.000000, 0.000000} };

// Default control
static const fxd default_u[nU] = {0.000000};

// Arrays to transform the inputs from their circuit range
// to the actual (model) range:
// x = (x_cir - sim_x_scale_bias).*sim_x_scale_gain
static const fxd_conv sim_x_scale_bias[nX_CTRL] = {-8.000000, -1.000000};
static const fxd_conv sim_x_scale_gain[nX_CTRL] = {0.003907, 0.000488};

// Arrays to transform the outputs from their actual (model)
// range to the actual circuit range:
// u_cir = u.*sim_u_scale_gain + sim_u_scale_bias
static const fxd_conv sim_u_scale_bias[nU] = {-0.300000};
static const fxd_conv sim_u_scale_gain[nU] = {6825.000000};

// Arrays to transform the reference signals from
// their circuit range to the actual (model) range:
// xref = (xref_cir - sim_xref_scale_bias).*sim_xref_scale_gain
static const fxd_conv sim_xref_scale_bias[nRef] = {-8.000000};
static const fxd_conv sim_xref_scale_gain[nRef] = {0.003907};

void scaleX(fxd_in x_in[nX], fxd x_reg[nX]);
void scaleRef(fxd_in ref_in[nRef], fxd ref_reg[nX]);
void scaleU(fxd u_reg[nU], fxd_out u_opt[nU]);
void augmentState(fxd x_reg[nX], fxd ref_reg[nX], fxd x_aug[nX_CTRL], fxd ref_aug[nX_CTRL], fxd u_old[nU]);
void extractU(fxd z[nDim_CTRL], fxd u_reg[nU], fxd u_old[nU]);
void control(fxd_in x_in[nX], fxd_out u_opt[nU], fxd_in ref_in[nRef]);

void admmInit(fxd x[nX_CTRL], fxd ref[nX_CTRL], fxd v1[nDim_CTRL], fxd v2[nCon + (N+1)*nX_CTRL]);
void admm(fxd v1[nDim_CTRL], fxd v2[nCon + (N+1)*nX_CTRL], fxd z[nDim_CTRL]);
#endif
